паттерн DAO - Data Access Object - общение с конкертной базой, обычно пишется sql код для работы с БД
паттер репозиторий - больше абстракций

3 подхода к работе с бд:
JDBC API - низкоуровневый способ - вручную пишем все запросы и сами переводим таблицы в объекты
JdbcTemplate - тонкая обертка вокруг JDBC API, часть спринг фреймворк, предсотавляет некоторые абстракции, берёт часть дел на себя
Hibernate - самый высокий урвоень абстракции. Практически не пишем запросы вручную к БД. Автоматический переводит объект в строки и назад.
	может автоматически создавать таблицы в БД на основании классов(Это называется ORM): маппинг или отображение наших объектов в реляционной базе данных

JDBC API: 
1) у connection берём объект statement(connection.getStatement()). 
	Для получения данных: ResultSet resulteSet = statement.executeQuery("sql string") , 
		у resultSet затем забираем все данные через resultSet.getString("колонка") или resultSet.getInt("колонка")
	Для добавления данных: statement.executeUpdate("sql string")(вроде бы возвращает число измененных столбцов)
2) preparedStatemant = connection.prepareStatement("SQL c ? ? ?"), вместо вопросов подставляем реальные значения(исключает инъекции). 
	через setString любая инъекция будет восприниматься, как просто строка. 
	Быстрее, чем statement, т.к. запрос формируется только один раз и затем просто подставляются данные. 
	Сам запрос компилируется один раз, данные потом подставляются в машшиный код, плюс preparedStatemant кэшируется в бд, то-есть он будет храниться в машинном коде

JdbcTemplate:
сокращение кода, маппинг
	jdbcTemplate.execQuery("sql string", RowMapper). RowMapper(интерфейс) - объект, который указывает, как преобразоывать строки из табицы в сущности.
	Всегда используется preparedStatement jdbcTemplate.execQuery("sql string c ?", массив значений для ?, RowMapper)

BatchUpdate - массавая вставка в базу. Делается через jdbc.batchUpdate(sqlQuery, new BatchPreparedStatement()) 
	у него реализуем методы setValues:вставляем значения в pstm как в цикле,
	getBatchSize - возвращаем количество необходимых вставок, как максимальное значение счетчика цикла

<<<<<<< HEAD
DTO - Data Tranfer Object - объект, через который работаем с клиентом, может иметь больше или меньше полей, чем в модели. 
	Модель - это часть бизнеслогики, а дто просто набор данных. DTO используется только на уровне контроллера
=======
У DB можно создать sequence, при обращени ик нему БД через nextval будет выдавать последовательно числа по порядку (1,2,3,4 ...) на них можно строить autoincrement
	через SERIAL(только постгрес) можно создавать автоинкрементный столбик

Constaraints - ограничения(not null, >0 , unique, primary key(unuque+notnull)...). Primary key идентифицирует целую строку(Например user_id)
primary key(unuque+notnull)
Foreign key - ссылка с одной таблицы(сам foreign key) на строку из другой таблицы, в обеих таблицы должны быть Primary key. 
	Например, таблица с заказами и таблица с людьми: один человек(одна строчка из первой бд) сделал несколько заказов, и в результате в таблице заказов,
	в двух строчках есть ссылки(foreign key) на одного и того же человека из первой таблицы), иными словами: внешний в ключ в таблице заказов - это первичный ключ в таблице людей.
	Названия колонок должны совпадать(user_id) в оеих таблицах
Foreign Key нужен для того, чтобы избежать избыточности. Иначе нам бы пришлось ххранить всю информацию о человеке(возраст, имя и проее), который купил 2 или более товаров в таблице заказов
Foreing key может быть одновременно Primary key в дочерней таблице

Отношения:
	один к многим: покупатель и его заказы, учитель и его ученики, режисер и его фильмы. Самое главное - один заказ не может принадлежат несколкьим людям
	один к одному: гражданин и паспорт, прездиент и страна. Президент может руководить только одной строной и старан может быть руководима тколько одним президентом
		Есть таблица паспартов(серия, номер, дата выдачи и прочее) и есть табдлица людей(имя, фамилия, адресс, увлечения)
	многие ко многоим: таблица актеров и таблица фильмов: в одном фильме может быть несколько актеров, один актер может сняться в нескольких фильмах
		Организовывается через связывающую табдицу(join_table) из 2 колонок в виде foreign key, каждый из которых это primary Key в связанных табдитцах
		При этом эти 2 колонки будут образовывать составной PK(не может быть 2 повторяющихся комбинаций из foreign key)

Объединение таблиц: объединение нормализованных таблиц(где отношение один ко многим и не нету избуыточных данных). Делается для более явного визуального представления,
	но не создается в бд, доступна только для разовго представления	
виды joinoв:inner join, outer join(left outer join, right outer join), cross join
	inner join: простое объединение таблиц, в результате будет таблица, которая содержит значения, которые есть в обеих таблицах
		(связи есть!, не каждая строка родительской таблицы содержит данные, которые являются FK для дочерней)
		результирующая таблица - это пересечение множеств значений из двух таблиц
	left outer join: берёт все PK(id) из левой таблицы(родительской) и ищет соответствие(FK) в правой таблице(дочерней), пустые пары будут заполнены null
	right outer join: берёт все FK(id) из правой таблицы(дочерней) и ищет соответствие(PK) в левой таблице(родительской)
	Cross join - все возможные сопоставления между таблицам - нету никакого взаимотношения между таблицами
inner join более строгий, чем left join

Индексы:
Для ускорения запросов, чтобы исключить full table scan. Вешается индекс на колонку, создается дополнительная сущность/таблица с отсоритрованными значениями этой колонки и id,
теперь можно применять более быстрые алогоритмы поиска, а не перебирать каждок значение. При этом с индексами более медленные вставки и занимают доп память на диске.
Если часто ищете по какой-то колонке - создавай индекс, редко ищешь по колонке - не создавай индекс
виды индексов в постгрес: PK, B-Tree index, hash index, gin & Gist index, BRIN index

Sequence - просто последовательность чисел в бд, можно делать автоинкремент

Каскадирование: Невозможно удалить строку из родительской таблицы, которая является FK для дочерней таблицы:
	Невозможно удалить человека (из род таблицы), у которого есть заказы в таблице заказов(дочерняя таблица)
	Виды каскадирования: 	
		Cascade - удаляет строки в зависимой таблице при удалении строк в главной таблице(удалили человека - удалились все заказы)
		Set Null - удалили человека - заказы стали Null
		Restrict - режим по умолчанию, выдает ошибку
session.persist() - есть во всех JPA, ничего не возвращает, не гарантирует выставление ключа сразу после вызова
session.save() - hibernate only, вовзращает id, гарантирует выставление ключа сразу после вызова
с помощью @Cascade в родительской сущности над списком дочерних можно настраивать каскадирование со сторону hibernate

Hybernate(под капотом JDBC API):
ORM - object relational mapping - отображение объектов в таблицы и наоборот
Hybernate - это ORM, который за нас автоматизирует отображение java Объектов в строки бд
Полчуаем данные через сессии, на сессии можно вызвать методы для работы с бд
у сессии начинаем тразакцию, вызываем методя для работы с бд(save, update ....), и затем у тразакции вызываем commit, или rollback, чтобы откатить тразакции
В одндой тразакции может быть несколько действий, во время открытой тразакции блокируется доступ к таблице.
Тразакции бывают с разным Transactional Isolation Level, чтобы избежать состояния гонки(2 тразакции пишут в таблицу одновременно). 	
Бывает мягкая изоляция: один потокможет писать, другой поток только читать. Бывает жесткая: пока поток один пишет - доступ полностью заблокирован к базе

@Entity - помечаем класс-сущность
@Table - название таблицы для этой сущности(не обязательно, когда названгие сущности такое же, как название таблицы в бд)

Можно использовать sequence генератор для создания id, в модели указываем к какому именно seq gen хотим подключиться и 
так же надо указать стратегию SEQUENCE в аннотации Generated value

HQL работает с сущностями(там где стоит @Entity)
HQL был разработан, чтобы мы не спускались до уровня таблиц, а делали запросы используя сущности. HQL конвертируется в SQL. В HQL можно писатьи обычные SQL для нестандартных запросов
Hibernate кэширует объекты в своей памяти и может не каждый раз делать запросы к базе
Хорошей практикой является задание отношений с двух сторон (добаввить человеку item и в базу, и, как объекту джава)
	
Java объекты-сущности проходят через несколько состояний: Transient, Persistent(Managed), detached, removed
Transient - просто создаем объект( Person person = new Person()), объект пока никак не связан с hibernate и им не сотслеживается
Persistent - вызываем, например, session.save(person) а затем commit, вот после коммита он начинает отслеживаться hibernate и становится Persistent(Managed).
	Либо, когда мы получаем объект из бд, тогда он тоже становится Persistent. Объект находится в Persistence context и отлсеживается hibernate
	Объект находится в Persistence context пока работает hibernate сессия
Detached - покидает persistent context и становится опять обычным джава объектом. session.detch(person) - убираем объект из Persistence context
	session.merge(person) - опять присоеденить объект к persistence context
Removed - будет помечен таким состояниям когда вызовем session.remove(person) и будет выполнен коммит

Для правильного выстраивания отношения один к одному в hibernate: помимо колонки с FK добавляем колонку id с автоинкрементом, а на колонку со ссылку на родительскую таблицу накладываем ограничение unique
>>>>>>> fbd0c450d96f8ac04f3f882f1bb7a690c2252d13
