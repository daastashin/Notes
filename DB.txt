паттерн DAO - Data Access Object - общение с конкертной базой, обычно пишется sql код для работы с БД
паттер репозиторий - больше абстракций

3 подхода к работе с бд:
JDBC API - низкоуровневый способ - вручную пишем все запросы и сами переводим таблицы в объекты
JdbcTemplate - тонкая обертка вокруг JDBC API, часть спринг фреймворк, предсотавляет некоторые абстракции, берёт часть дел на себя
Hibernate - самый высокий урвоень абстракции. Практически не пишем запросы вручную к БД. Автоматический переводит объект в строки и назад.
	может автоматически создавать таблицы в БД на основании классов(Это называется ORM): маппинг или отображение наших объектов в реляционной базе данных

JDBC API: 
1) у connection берём объект statement(connection.getStatement()). 
	Для получения данных: ResultSet resulteSet = statement.executeQuery("sql string") , 
		у resultSet затем забираем все данные через resultSet.getString("колонка") или resultSet.getInt("колонка")
	Для добавления данных: statement.executeUpdate("sql string")(вроде бы возвращает число измененных столбцов)
2) preparedStatemant = connection.prepareStatement("SQL c ? ? ?"), вместо вопросов подставляем реальные значения(исключает инъекции). 
	через setString любая инъекция будет восприниматься, как просто строка. 
	Быстрее, чем statement, т.к. запрос формируется только один раз и затем просто подставляются данные. 
	Сам запрос компилируется один раз, данные потом подставляются в машшиный код, плюс preparedStatemant кэшируется в бд, то-есть он будет храниться в машинном коде

JdbcTemplate:
сокращение кода, маппинг
	jdbcTemplate.execQuery("sql string", RowMapper). RowMapper(интерфейс) - объект, который указывает, как преобразоывать строки из табицы в сущности.
	Всегда используется preparedStatement jdbcTemplate.execQuery("sql string c ?", массив значений для ?, RowMapper)