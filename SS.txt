Есть Security Filter Chain, заетм только идут прсотые фильтры. Secirity фильтры должны иметь аргументы при регисстрации(addFilterBefore и тд) в виде след классов:
	UsernamePasswordAuthenticationFilter: Handles form-based login.
	BasicAuthenticationFilter: Handles HTTP Basic authentication.
	SecurityContextPersistenceFilter: Restores the SecurityContext from the SecurityContextRepository.
	FilterSecurityInterceptor: Performs authorization checks.

hasRole("ADMIN") - имеет роль
hasAuthorities("DOTHIS", "ORDOTHIS") - может делать какие-то действия

Запрос попадает на Spring Security, затем идет на AuthProviderImpl(там проходит логика аутентификации через authenticate и support). В классе AuthProviderImpl мы используем сервис PersonDetailsService для связи с БД, 
в котором реализован всего-лишь один метод loadUserByUserName(забираем пользователоя из базы). Мы забираем человека из БД и в классе PersonDetailsService в методе loadUserByUserName оборачиваем челвоека в PersonDetails.
PersonDetails реализует UserDetails(getAuthorities(), getPassword, getUserName, isAccountNonExpired). Если логин и пароль совпадают, то мы возвращаем объект Authentication с Principal внутри из метода authenticate в AuthProviderImpl
Principal - это объект класса PersonDetails. Затем этот principal кладем в контекст, в ходе выполнения из контекста можно достать текущий principal с пользователем. 

