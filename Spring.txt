Бины могут внедряться с помощью Application context, у которого потом через getContext запрашивает бины по имени.
В Application properties через xml Описываются бины: можно внедрять один бин в другой, можно внедрять бины через сеттеры или внедрять занченичя примитивных типов
Scope у бинов: singleton(бин создается один раз, затем используется ссылка), prototype(бин создается каждый раз, при внедрении, спринг не вывзывает метод ondestroy))
У бинов есть Init-method(инициализация ресурсов), desytroy-method(осовбождение ресурсов).
Бины можно создавать через factory method(необходимо указать заранее)
Аннотации:
@Component(id = "beanName") -спринг ищет эту аннотацию, чтобы создать бин из этого класса, без id - бин будет называться, как класс, только с маленькой буквы
	из компонентов создают бины
@Bean - Public ClassicalMusic musicBean() {return New ClassicalMusic;} "musicBean" - id бина
@ComponentScan или такое же указание через applicationContext.xml - указание пакета, где спринг будет искать классы помеченные @Component
@Autowired - спринг сам ищет нужный бин и внедряет его. МОжно использовать на полях, сеттерах и конструкторах. Внедряет через рефлексию
@Qualifier - уточняем id бина, который хотим использовать в @Autowired, при использовании у конструктора необходимо использовать перед аргументом
@Configuration - помечаем класс, который хотим использовть для конфигурации. В этом классе создаем бины через @Bean. Затем также через ClassPathXmlApplicationContext достаем бины
@Value("${key}") - внедрение данных из файла
@PropertySource("classpath:file.name") указать источник

Spring MVC - DispathcerServlet - входная точка SpringMVC приложения
В методы GetMapping, PostMapping и прочие можно в качестве аргументов получить модель, спринг увидит и внедрит модель в аргументы. 
Модель можно использовать для вывода на представлении

@RequestBody с помощью jackson конвертирует json в объект. Дополнительно можно поставить аннотацию @Valid чтобы hibernate validator проверил валидность полей этого объекта.
	при это в модели надо указать критерии валидности(валидность проверяется с помощью bindingResult)
BindingResult - это поле должно всегда идти после поля класса, который валидируется, 