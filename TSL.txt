3 главные цели TSL:
	Confidentiality - никто третий не может прочитать сообщение. Обсепечивается шифрованием
	Integrity - никто третий не может изменить сообщение. Обеспечивается хэшированием
	Authentication - клиент или сервер действительно являются клиентом или сервером, а не кем-то другим. Обеспечивается PKI(Public key Infrastructure)

PKI(Public key Infrastructure) - треугольник, по углам которого клиент, сервер и CA

MAC - message auth code - сообщения и секретного кода через хэш код
	Важен порядок расположения сообщения и секретного кода.

Алгоритм хэширования:
	на входе сообщение, на выходе хэш-сумма. Например MD5, SHA256 и ...
МАС:
	на входе сообщение + секретный код, на выходе хэш-сумма. Например HMAC (Hash Based Message Auth code)
	
Шифрование для обеспечения Confidentiality. Шифрование преобразует данные: hello - ellho
	Симметричное шифрование - подходит для больших данных
		шифрует и дешифрует данные одними и теми же ключами
		оно быстрее. Зашифрованный текст того же размера
		публичный ключ должен быть передан явно
		менее безопасно
		Алгоритмы: AES, ChaCha20. Примерный размер ключа ~200 бит
		
	Асимметричное шифрование - Не предназначено для больших объёмов данных
		шифрует и дешифрует данные разными ключами(encyption key и decryption key). encyption key и decryption key могут быть взаимозаменяемые, напр: шифровать ключом дешифрования и наоборот
		Оно медленне
		Зашифрованный текст увеличивается в размере
		Более безопасно
		Алгоритмы: DSA, RSA, Diffie-Hoffman, ECDSA, ECDH. Примерный размер ключа ~2048 бит

	Можно использовать ассиметричное шифрование для обмена ключами и симметричное шифрование для передачи больших объемов данных - это и есть TLS

Public and Private Keys

Signature:
Integrity отправляем хэш сообщения и само сообщение. На другой стороне опять вычисляется хэш сообщения и если хэш сообщения и соответсвует переданному хэшу сообщения, значит сообщение - полное
Используется приватный ключ отправителя для того, чтобьы зашифровать хэш сумму сообщения - это и есть signature		

CA Certificate Authority:
	клиент доверяет CA
	CA генерит сертификат, который связывает пару асимметричных ключей с определенной личностью
	Сертификат подписан CA

RSA: Сервер генерит 2 произвольных простых числа (P,Q), получаем их произведение N = P*Q, вычисляем тотиент T = (P-1)*(Q-1). 
	Затем выбираем публичный ключ(E), он должен быть: простым числом, должен быть меньше тотиента и НЕ ДОЛЖЕН быть одним из множителей тотиента
	Затем выбираем приватный ключ(D): должно выполняться условие: (D*E) MOD T = 1: остаток от деления произведение публичного ключа и првиатного на тотиент должекн быть равен 1
	Например: P=7, Q=19, тогда N=133, T=108, E=29, D=41.
	Сервер открыто отправляет клиенту N(произведение заданных простых чисел) и E(публичный ключ)
	
	Шифрование: message^E MOD N = cipher text
	Дешифрование: cipher^D MOD N = message
	
	Безопасность RSA определяется количеством бит на число N, если число N будет длиной 1024 бит - это будет десятичное число длиной примерно в 300 символов
	
Если взять простое число p и число g, то: Возводя g в степень 1 , 2 , 3 , … , p − 1, и вычисляя остаток от деления на p, Мы должны получить все числа от 1 до p − 1 без повторений. Тогда g - первообразный корень.
Diffie-Hellman: сервер берёт простое число и первообразный корень простого числа. Открыто отдает эти 2 числа клиенту. Затем обе стороны генерируют секретные ключи в виде рандомных чисел