Iterable -> Colelction -> {Set, List, Queue}
Map
Set - множество(исключает дубли)
List - в порядке добавления(LinkedList -быстрое добавдение удаление, ArrayList - быстрый поиск по индексу)
Map - ключ значение (Вычисляется хэш ключа, нормальзуется отнсоительно количества бакетов, кладется в в бакет

Map:
HashTable - основана на хэш-таблице, нельзя null as key or value. Hashtable - синхронизованная. Большие рпоблемы с производительностью
HashMap - альтернатива HashTable, несинхронизованная, позволяет использовать нулл в качестве ключа или значения. Порядок элементов зависит от хэш-функции.
Элементы хранятся в бакетах, добавление за констатное время О(1),
LinkedHashMap - упорядоченная  хэш-таблица. Элементы хранятся в порядке добавления.
TreeMap - элементы хранятся в natural order, через реализацию интерфейса Comparator. Внутри бакетов красное-черное дерево.

List:
Vector - динамический массив, можно null, все методы синхронизованны (потокобезопасный)
ArrayList - динамический массив, можно null
Stack - LIFO
LinkedList - двунаправленный связный список, можно null

Set:
HashSet - внутри HashMap. В качестве ключа - элемент, в качестве значения - пустышка new Object(). Не гарантирует порядок
LinkedHashSet - внутри LinkedHashMap. Порядок элекментов - порядок добавления.
TreeSet - внутри NavigableMap Предоставляет возможность управлять порядком элементов в коллекции при помощи объекта Comparator, 
	либо сохраняет элементы с использованием "natural ordering".